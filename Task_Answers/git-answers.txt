1. What is 'git stash' and how to use it?

Answer:
Stash is used to save a 'dirty' state of current working directory and Index which is helpful if you
want to switch to another branch but don't want to make a commit in current and to lose your current work.
You can simply run git stash so it'll be saved without commit, switch to other branch, do some work there, commit
(or stash too if it's needed) then return to previous branch and run git stash apply to make everything (working dir,
stage area) as it was before stashing.

2. What is 'git reset' and when we shouldn't use it?

'git reset' is a command which is useful when you wan't to undo the local changes in staging area
or working directory. The 'git reset <file>' will unstage the selected file but leave the working directory
in the current state. Running 'git reset' will unstage all files without changing the working directory.
There's 'git reset --hard' which could be dangerous because it overwrites the working dir so it will fit
the state which it had on the last commit so you'll lose all your work from the last commit.

We definitely shouldn't use it when changes we want to 'reset' are already pushed to remote origin because
other team members should've been already started to work on it and when you'll make and push next commit it will confuse
everybody because it looks like the part of previous work just dissapeared.

So the resume: locally - gives ability to make more ordered commits because you've a chance to stage changes in more
structured way
after pushing to public repo - bad practice because nobody will understand what's wrong (it's better to use revert,
which makes a new commit with current state set as it was in some previous point but _all changes history_ still saved.

3. When we need cherry-pick, and how does it happens?

'git cherry-pick <commit>' is needed when we want to apply changes from another branch, but not all (which could be done
by 'git merge'. For example you've created 'feature' branch when you're planning to make some hotfix and refactor some
code but you've an urgent requirement to apply only the hotfix to the 'master'. So you can simply switch to master,
run 'git cherry-pick <cherry>' where cherry is the specific commit with hotfix applied from the 'feature' branch.

After running this command git finds a diff betwen the common <common-ancestor-commit> of 'feature' and 'master' branches,
then takes the diff between <common-ancestor-commit> and <cherry-commit> and applies all changes to master in a new commit.

4. What does do 'git rm ..' command and what not?

'git rm ..' removes selected file(s) from the index and from working dir. In case of running it with '--cached' option
it will be removed only from Index but will still be available in working directory.
But this command doesn't interrupt tracking changes in file while some future changes so it has to be added to .gitignore
to stop tracking it at all.
It could be useful for files which are automatically generated by IDE or temporary files which make staging area not clean
and hold your attention from the really important project files you're workng on.